generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id
  displayname     String
  email           String  @unique
  dipartment      String
  city            String
  passwordHash    String
  googleId        String? @unique
  avatarUrl       String?
  admin           Boolean @default(false)
  permisionToggal Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions          Session[]
  Todayswork        Todayswork[]
  StaffWork         StaffWork[]
  Reting            Reting[]
  Atendace          Attendance[]
  Telecaller        Telecaller[]
  Reception         Reception[]
  Medicene          Medicene[]
  Ranchishop        Ranchishop[]
  Offlinedoctorshop Offlinedoctorshop[]
  Onlinedoctorshop  Onlinedoctorshop[]
  useentry          useentry[]
  Revenuetracker    Revenuetracker[]
  Hdod              Hdod[]
  Ecart             Ecart[]
  Designer          Designer[]
  Mixer             Mixer[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Todayswork {
  id      String    @id @default(cuid())
  dob     DateTime?
  content String

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todayswork")
}

model StaffWork {
  id     String  @id @default(cuid())
  userId String
  task1  String?
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?
  task14 String?
  task15 String?
  task16 String?
  task17 String?
  task18 String?
  task19 String?
  task20 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("staffWork")
}

model Reting {
  id     String  @id @default(cuid())
  userId String
  task1  String?
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?
  task14 String?
  task15 String?
  task16 String?
  task17 String?
  task18 String?
  task19 String?
  task20 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("reting")
}

model Attendance {
  id     String @id @default(cuid())
  userId String
  status String // "present" or "absent"

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attendance")
}

model useentry {
  id          String @id @default(cuid())
  userId      String
  status      String // "present" or "absent"
  lateMinutes Int?
  statusR     String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("useentry")
}

model Telecaller {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?

  task6 String?
  task7 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("telecaller")
}

model Reception {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("reception")
}

model Medicene {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("medicene")
}

model Ranchishop {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("ranchishop")
}

model Offlinedoctorshop {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?

  task12 String?

  task13 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("offlinedoctorshop")
}

model Onlinedoctorshop {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?
  task14 String?
  task15 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("onlinedoctorshop")
}

model Revenuetracker {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("revenuetracker")
}

model Hdod {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("hdod")
}

model Ecart {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ecart")
}

model Designer {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("designer")
}

model Mixer {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mixer")
}
