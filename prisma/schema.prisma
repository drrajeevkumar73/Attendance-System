generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id
  displayname     String
  email           String  @unique
  dipartment      String
  city            String
  passwordHash    String
  googleId        String? @unique
  avatarUrl       String?
  admin           Boolean @default(false)
  permisionToggal Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions          Session[]
  Todayswork        Todayswork[]
  StaffWork         StaffWork[]
  Reting            Reting[]
  Atendace          Attendance[]
  Telecaller        Telecaller[]
  Reception         Reception[]
  Medicene          Medicene[]
  Ranchishop        Ranchishop[]
  Offlinedoctorshop Offlinedoctorshop[]
  Onlinedoctorshop  Onlinedoctorshop[]
  useentry          useentry[]
  Revenuetracker    Revenuetracker[]
  Hdod              Hdod[]
  Ecart             Ecart[]
  Designer          Designer[]
  Mixer             Mixer[]
  Accountant        Accountant[]

  CallLog    CallLog[]
  Uplodthing Uplodthing?

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Todayswork {
  id      String    @id @default(cuid())
  dob     DateTime?
  content String

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todayswork")
}

model StaffWork {
  id     String  @id @default(cuid())
  userId String
  task1  String?
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?
  task14 String?
  task15 String?
  task16 String?
  task17 String?
  task18 String?
  task19 String?
  task20 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("staffWork")
}

model Reting {
  id     String  @id @default(cuid())
  userId String
  task1  String?
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?
  task14 String?
  task15 String?
  task16 String?
  task17 String?
  task18 String?
  task19 String?
  task20 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("reting")
}

model Attendance {
  id     String @id @default(cuid())
  userId String
  status String // "present" or "absent"

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attendance")
}

model useentry {
  id          String @id @default(cuid())
  userId      String
  status      String // "present" or "absent"
  lateMinutes Int?
  statusR     String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("useentry")
}

model Telecaller {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?

  task6 String?
  task7 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("telecaller")
}

model Reception {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("reception")
}

model Medicene {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("medicene")
}

model Ranchishop {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("ranchishop")
}

model Offlinedoctorshop {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?

  task12 String?

  task13 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("offlinedoctorshop")
}

model Onlinedoctorshop {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?
  task14 String?
  task15 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("onlinedoctorshop")
}

model Revenuetracker {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("revenuetracker")
}

model Hdod {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("hdod")
}

model Ecart {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ecart")
}

model Designer {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("designer")
}

model Mixer {
  id     String  @id @default(cuid())
  userId String
  task1  String
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mixer")
}

model Accountant {
  id      String  @id @default(cuid())
  userId  String
  task1   String
  task2   String?
  task3   String?
  task4   String?
  task5   String?
  task6   String?
  task7   String?
  task8   String?
  task9   String?
  task10  String?
  task11  String?
  task12  String?
  task13  String?
  task14  String?
  task15  String?
  task16  String?
  task17  String?
  task18  String?
  task19  String?
  task20  String?
  task21  String?
  task22  String?
  task23  String?
  task24  String?
  task25  String?
  task26  String?
  task27  String?
  task28  String?
  task29  String?
  task30  String?
  task31  String?
  task32  String?
  task33  String?
  task34  String?
  task35  String?
  task36  String?
  task37  String?
  task38  String?
  task39  String?
  task40  String?
  task41  String?
  task42  String?
  task43  String?
  task44  String?
  task45  String?
  task46  String?
  task47  String?
  task48  String?
  task49  String?
  task50  String?
  task51  String?
  task52  String?
  task53  String?
  task54  String?
  task55  String?
  task56  String?
  task57  String?
  task58  String?
  task59  String?
  task60  String?
  task61  String?
  task62  String?
  task63  String?
  task64  String?
  task65  String?
  task66  String?
  task67  String?
  task68  String?
  task69  String?
  task70  String?
  task71  String?
  task72  String?
  task73  String?
  task74  String?
  task75  String?
  task76  String?
  task77  String?
  task78  String?
  task79  String?
  task80  String?
  task81  String?
  task82  String?
  task83  String?
  task84  String?
  task85  String?
  task86  String?
  task87  String?
  task88  String?
  task89  String?
  task90  String?
  task91  String?
  task92  String?
  task93  String?
  task94  String?
  task95  String?
  task96  String?
  task97  String?
  task98  String?
  task99  String?
  task100 String?
  task101 String?
  task102 String?
  task103 String?
  task104 String?
  task105 String?
  task106 String?
  task107 String?
  task108 String?
  task109 String?
  task110 String?
  task111 String?
  task112 String?
  task113 String?
  task114 String?
  task115 String?
  task116 String?
  task117 String?
  task118 String?
  task119 String?
  task120 String?
  task121 String?
  task122 String?
  task123 String?
  task124 String?
  task125 String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accountant")
}

model Uplodthing {
  id     String @id @default(cuid())
  userId String @unique
  task1  String?
  task2  String?
  task3  String?
  task4  String?
  task5  String?
  task6  String?
  task7  String?
  task8  String?
  task9  String?
  task10 String?
  task11 String?
  task12 String?
  task13 String?
  task14 String?
  task15 String?
  task16 String?
  task17 String?
  task18 String?
  task19 String?
  task20 String?

  task21 String?
  task22 String?
  task23 String?
  task24 String?
  task25 String?
  task26 String?
  task27 String?
  task28 String?
  task29 String?
  task30 String?
  task31 String?
  task32 String?
  task33 String?
  task34 String?
  task35 String?
  task36 String?
  task37 String?
  task38 String?
  task39 String?
  task40 String?
  task41 String?
  task42 String?
  task43 String?
  task44 String?
  task45 String?
  task46 String?
  task47 String?
  task48 String?
  task49 String?
  task50 String?
  task51 String?
  task52 String?
  task53 String?
  task54 String?
  task55 String?
  task56 String?
  task57 String?
  task58 String?
  task59 String?
  task60 String?
  task61 String?
  task62 String?
  task63 String?
  task64 String?
  task65 String?
  task66 String?
  task67 String?
  task68 String?
  task69 String?

  items1  Boolean @default(false)
  items2  Boolean @default(false)
  items3  Boolean @default(false)
  items4  Boolean @default(false)
  items5  Boolean @default(false)
  items6  Boolean @default(false)
  items7  Boolean @default(false)
  items8  Boolean @default(false)
  items9  Boolean @default(false)
  items10 Boolean @default(false)
  items11 Boolean @default(false)
  items12 Boolean @default(false)
  items13 Boolean @default(false)
  items14 Boolean @default(false)
  items15 Boolean @default(false)

  reco1 String
  reco2 String
  reco3 String
  reco4 String

  panCard       String
  aadharCard    String
  marksheet     String
  YourPhoto     String
  bancksheeding String
  localproff    String
  parentAdhar   String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("uplodthing")
}

model CallLog {
  id              String @id @default(cuid())
  userId          String
  telecallerId    String
  patientPhone    String
  telecallerPhone String
  callSid         String
  callStatus      String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("callLog")
}
